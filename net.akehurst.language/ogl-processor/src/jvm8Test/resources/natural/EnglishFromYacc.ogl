// modified from [https://github.com/onlyuser/parse-english]

namespace net.akehurst.language.natural

grammar EnglishSentence2

    sentence
        = statement
        | question
        | conditional
        | imperative
        ;

    statement = statement_clause_list '.' ;

    statement_clause_list
        = statement_clause
        | statement_clause_list                 statement_clause
        | statement_clause_list   CONJ_CLAUSE   statement_clause
        ;

    question
        = question_clause_list '?'
        | statement_clause_list '?'
        ;

    conditional
        = IF        statement_clause_list    THEN          statement_clause_list '.'
        | BECAUSE   statement_clause_list    CONJ_CLAUSE   statement_clause_list '.'
        |           statement_clause_list    BECAUSE       statement_clause_list '.'
        |           AUX_NP_V                 CONJ_CLAUSE   statement_clause_list '.'
        ;

    imperative
        = imperative_list '.'
        | imperative_list '!'
        ;

    imperative_list
        = IVP
        | imperative_list             IVP
        | imperative_list CONJ_CLAUSE IVP
        ;

    statement_clause =
      NP_LIST VP_LIST
    ;

    question_clause:
              QVP
    | WH_WORD QVP
    ;

//=============================================================================
// NOUN PART -- VERB PART

NP:
      NP_THING
    | ADV_VGERUND_NP
    | INFIN
    | WH_PRONOUN VP
    | PREP_LIST
    ;

NP_THING:
      DET_ADJ_N
    | DET_ADJ_N SUFFIXPOSS POSS_LIST
    |                      POSS_LIST
    ;

VP:
        AUX_NOT_V
    |             ADV_VPAST_NP
    |             DO_TARGET
    |    DO_NOT   DO_TARGET
    | MODAL_NOT   MODAL_TARGET
    ;

QVP:
        AUX_NP_V
    |    DO_NP   DO_TARGET
    | MODAL_NP   MODAL_TARGET
    ;

IVP:
      IAUX_V
    |        DO_TARGET
    | DO_NOT DO_TARGET
    ;

//=============================================================================
// AUXILIARY VERB

AUX_V:
           BE   OPT_BE_TARGET
    | HAVE BEEN OPT_BE_TARGET
    | HAVE      HAVE_TARGET
    ;

IAUX_V:
      IBE OPT_BE_TARGET
    ;

AUX_NOT_V:
               BE_NOT OPT_BE_TARGET
    | HAVE_NOT BEEN   OPT_BE_TARGET
    | HAVE_NOT        HAVE_TARGET
    ;

AUX_NP_V:
              BE_NP OPT_BE_TARGET
    | HAVE_NP BEEN  OPT_BE_TARGET
    | HAVE_NP       HAVE_TARGET
    ;

//=============================================================================
// MODIFIES NOUN

V_NP:
      V         { $$ = MAKE_SYMBOL(ID_V_NP, 1, $1); }
    | V NP_LIST { $$ = MAKE_SYMBOL(ID_V_NP, 2, $1, $2); }
    ;

VPAST_NP:
      VPAST         { $$ = MAKE_SYMBOL(ID_VPAST_NP, 1, $1); }
    | VPAST NP_LIST { $$ = MAKE_SYMBOL(ID_VPAST_NP, 2, $1, $2); }
    ;

VGERUND_NP:
      VGERUND               { $$ = MAKE_SYMBOL(ID_VGERUND_NP, 1, $1); }
    | VGERUND NP_LIST       { $$ = MAKE_SYMBOL(ID_VGERUND_NP, 2, $1, $2); }
    | BEING   OPT_BE_TARGET { $$ = MAKE_SYMBOL(ID_VGERUND_NP, 2, $1, $2); }
    ;

PREP_NP:
      PREP NP_LIST { $$ = MAKE_SYMBOL(ID_PREP_NP, 2, $1, $2); }
    ;

//=============================================================================
// BE -- HAVE -- MODAL -- DO (TARGET)

BE_TARGET:
      HAVE_TARGET
    | NP_LIST
    | ADJ_LIST
    ;

HAVE_TARGET:
      VPASTPERF
    | VPASTPERF NP_LIST
    ;

MODAL_TARGET:
      DO_TARGET
    | AUX_V
    ;

DO_TARGET:
      ADV_V_NP
    | V_INFIN
    ;

OPT_BE_TARGET:
      /* empty */ { $$ = xl::node::SymbolNode::eol(); }
    | BE_TARGET
    ;

//=============================================================================
// MODIFIES NOUN (MODIFIED BY ADVERB)

ADV_V_NP:
                V_NP           { $$ = MAKE_SYMBOL(ID_ADV_V_NP, 1, $1); }
    | ADV_MOD_V V_NP           { $$ = MAKE_SYMBOL(ID_ADV_V_NP, 2, $1, $2); }
    |           V_NP ADV_MOD_V { $$ = MAKE_SYMBOL(ID_ADV_V_NP, 2, $1, $2); }
    ;

ADV_VPAST_NP:
                VPAST_NP           { $$ = MAKE_SYMBOL(ID_ADV_VPAST_NP, 1, $1); }
    | ADV_MOD_V VPAST_NP           { $$ = MAKE_SYMBOL(ID_ADV_VPAST_NP, 2, $1, $2); }
    |           VPAST_NP ADV_MOD_V { $$ = MAKE_SYMBOL(ID_ADV_VPAST_NP, 2, $1, $2); }
    ;

ADV_VGERUND_NP:
                          VGERUND_NP                      { $$ = MAKE_SYMBOL(ID_ADV_VGERUND_NP, 1, $1); }
    | ADV_MOD_VGERUND_PRE VGERUND_NP                      { $$ = MAKE_SYMBOL(ID_ADV_VGERUND_NP, 2, $1, $2); }
    |                     VGERUND_NP ADV_MOD_VGERUND_POST { $$ = MAKE_SYMBOL(ID_ADV_VGERUND_NP, 2, $1, $2); }
    ;

//=============================================================================
// INFINITIVE

INFIN:
      TO_NOT MODAL_TARGET { $$ = MAKE_SYMBOL(ID_INFIN, 2, $1, $2); }
    ;

V_INFIN:
      V_MOD_INFIN INFIN { $$ = MAKE_SYMBOL(ID_V_INFIN, 2, $1, $2); }
    ;

//=============================================================================
// ADJECTIVE -- ADVERB

ADJ_N:
               N { $$ = MAKE_SYMBOL(ID_ADJ_N, 1, $1); }
    | ADJ_LIST N { $$ = MAKE_SYMBOL(ID_ADJ_N, 2, $1, $2); }
    ;

ADV_ADJ:
                  ADJ { $$ = MAKE_SYMBOL(ID_ADV_ADJ, 1, $1); }
    | ADV_MOD_ADJ ADJ { $$ = MAKE_SYMBOL(ID_ADV_ADJ, 2, $1, $2); }
    ;

//=============================================================================
// DEMONSTRATIVE -- ARTICLE/PREFIX-POSSESSIVE -- SUFFIX-POSSESSIVE

DET_ADJ_N:
      DEM                     { $$ = MAKE_SYMBOL(ID_DET_ADJ_N, 1, $1); }
    | DEM               ADJ_N { $$ = MAKE_SYMBOL(ID_DET_ADJ_N, 2, $1, $2); }
    | ART_OR_PREFIXPOSS ADJ_N { $$ = MAKE_SYMBOL(ID_DET_ADJ_N, 2, $1, $2); }
    ;

//=============================================================================
// BE -- HAVE -- MODAL -- DO -- TO (MODIFIED BY NOT)

BE_NOT:
      BE     { $$ = MAKE_SYMBOL(ID_BE_NOT, 1, $1); }
    | BE NOT { $$ = MAKE_SYMBOL(ID_BE_NOT, 2, $1, $2); }
    ;

HAVE_NOT:
      HAVE     { $$ = MAKE_SYMBOL(ID_HAVE_NOT, 1, $1); }
    | HAVE NOT { $$ = MAKE_SYMBOL(ID_HAVE_NOT, 2, $1, $2); }
    ;

MODAL_NOT:
      MODAL     { $$ = MAKE_SYMBOL(ID_MODAL_NOT, 1, $1); }
    | MODAL NOT { $$ = MAKE_SYMBOL(ID_MODAL_NOT, 2, $1, $2); }
    ;

DO_NOT:
      DO     { $$ = MAKE_SYMBOL(ID_DO_NOT, 1, $1); }
    | DO NOT { $$ = MAKE_SYMBOL(ID_DO_NOT, 2, $1, $2); }
    ;

TO_NOT:
      TO_MOD_V     { $$ = MAKE_SYMBOL(ID_TO_NOT, 1, $1); }
    | TO_MOD_V NOT { $$ = MAKE_SYMBOL(ID_TO_NOT, 2, $1, $2); }
    ;

//=============================================================================
// BE -- HAVE -- MODAL -- DO (MODIFIED BY NOUN)

BE_NP:
      BE_NOT NP_LIST { $$ = MAKE_SYMBOL(ID_BE_NP, 2, $1, $2); }
    ;

HAVE_NP:
      HAVE_NOT NP_LIST { $$ = MAKE_SYMBOL(ID_HAVE_NP, 2, $1, $2); }
    ;

MODAL_NP:
      MODAL_NOT NP_LIST { $$ = MAKE_SYMBOL(ID_MODAL_NP, 2, $1, $2); }
    ;

DO_NP:
      DO_NOT NP_LIST { $$ = MAKE_SYMBOL(ID_DO_NP, 2, $1, $2); }
    ;

//=============================================================================
// LIST





QCLAUSE_LIST:
                               QCLAUSE { $$ = MAKE_SYMBOL(ID_QCLAUSE_LIST, 1, $1); }
    | QCLAUSE_LIST             QCLAUSE { $$ = MAKE_SYMBOL(ID_QCLAUSE_LIST, 2, $1, $2); }
    | QCLAUSE_LIST CONJ_CLAUSE QCLAUSE { $$ = MAKE_SYMBOL(ID_QCLAUSE_LIST, 3, $1, $2, $3); }
    ;



NP_LIST:
                          NP { $$ = MAKE_SYMBOL(ID_NP_LIST, 1, $1); }
    | NP_LIST             NP { $$ = MAKE_SYMBOL(ID_NP_LIST, 2, $1, $2); }
    | NP_LIST CONJ_NP_NOT NP { $$ = MAKE_SYMBOL(ID_NP_LIST, 3, $1, $2, $3); }
    ;

VP_LIST:
                          VP { $$ = MAKE_SYMBOL(ID_VP_LIST, 1, $1); }
    | VP_LIST             VP { $$ = MAKE_SYMBOL(ID_VP_LIST, 2, $1, $2); }
    | VP_LIST CONJ_VP_NOT VP { $$ = MAKE_SYMBOL(ID_VP_LIST, 3, $1, $2, $3); }
    ;

ADJ_LIST:
                            ADV_ADJ { $$ = MAKE_SYMBOL(ID_ADJ_LIST, 1, $1); }
    | ADJ_LIST              ADV_ADJ { $$ = MAKE_SYMBOL(ID_ADJ_LIST, 2, $1, $2); }
    | ADJ_LIST CONJ_ADJ_NOT ADV_ADJ { $$ = MAKE_SYMBOL(ID_ADJ_LIST, 3, $1, $2, $3); }
    ;

PREP_LIST:
                              PREP_NP { $$ = MAKE_SYMBOL(ID_PREP_LIST, 1, $1); }
    | PREP_LIST               PREP_NP { $$ = MAKE_SYMBOL(ID_PREP_LIST, 2, $1, $2); }
    | PREP_LIST CONJ_PREP_NOT PREP_NP { $$ = MAKE_SYMBOL(ID_PREP_LIST, 3, $1, $2, $3); }
    ;

POSS_LIST:
                           ADJ_N { $$ = MAKE_SYMBOL(ID_POSS_LIST, 1, $1); }
    | POSS_LIST SUFFIXPOSS ADJ_N { $$ = MAKE_SYMBOL(ID_POSS_LIST, 3, $1, $2, $3); }
    ;

//=============================================================================
// CONJUGATION

CONJ_NP_NOT:
      CONJ_NP     { $$ = MAKE_SYMBOL(ID_CONJ_NP_NOT, 1, $1); }
    | CONJ_NP NOT { $$ = MAKE_SYMBOL(ID_CONJ_NP_NOT, 2, $1, $2); }
    ;

CONJ_VP_NOT:
      CONJ_VP     { $$ = MAKE_SYMBOL(ID_CONJ_VP_NOT, 1, $1); }
    | CONJ_VP NOT { $$ = MAKE_SYMBOL(ID_CONJ_VP_NOT, 2, $1, $2); }
    ;

CONJ_ADJ_NOT:
      CONJ_ADJ
    | CONJ_ADJ NOT
    ;

CONJ_PREP_NOT:
      CONJ_PREP
    | CONJ_PREP NOT
    ;

//=============================================================================
// WH-PRONOUN

WH_PRONOUN:
      WH_WORD
    | WH_WORD_MOD_THAT
    ;

//=========
// TERMINAL
//=========

//=============================================================================
// NOUN -- VERB -- ADJECTIVE -- ADVERB -- PREPOSITION -- NOT

N:
      ID_N { $$ = MAKE_TERM(ID_N, $1); }
    ;

V:
      ID_V { $$ = MAKE_TERM(ID_V, $1); }
    ;

VPAST:
      ID_VPAST { $$ = MAKE_TERM(ID_VPAST, $1); }
    ;

VGERUND:
      ID_VGERUND { $$ = MAKE_TERM(ID_VGERUND, $1); }
    ;

VPASTPERF:
      ID_VPASTPERF { $$ = MAKE_TERM(ID_VPASTPERF, $1); }
    ;

V_MOD_INFIN:
      ID_V_MOD_INFIN { $$ = MAKE_TERM(ID_V_MOD_INFIN, $1); }
    ;

ADJ:
      ID_ADJ { $$ = MAKE_TERM(ID_ADJ, $1); }
    ;

ADV_MOD_ADJ:
      ID_ADV_MOD_ADJ { $$ = MAKE_TERM(ID_ADV_MOD_ADJ, $1); }
    ;

ADV_MOD_V:
      ID_ADV_MOD_V { $$ = MAKE_TERM(ID_ADV_MOD_V, $1); }
    ;

ADV_MOD_VGERUND_PRE:
      ID_ADV_MOD_VGERUND_PRE { $$ = MAKE_TERM(ID_ADV_MOD_VGERUND_PRE, $1); }
    ;

ADV_MOD_VGERUND_POST:
      ID_ADV_MOD_VGERUND_POST { $$ = MAKE_TERM(ID_ADV_MOD_VGERUND_POST, $1); }
    ;

PREP:
      ID_PREP { $$ = MAKE_TERM(ID_PREP, $1); }
    ;

NOT:
      ID_NOT { $$ = MAKE_TERM(ID_NOT, $1); }
    ;

//=============================================================================
// DEMONSTRATIVE -- ARTICLE/PREFIX-POSSESSIVE -- SUFFIX-POSSESSIVE

DEM:
      ID_DEM { $$ = MAKE_TERM(ID_DEM, $1); }
    ;

ART_OR_PREFIXPOSS:
      ID_ART_OR_PREFIXPOSS { $$ = MAKE_TERM(ID_ART_OR_PREFIXPOSS, $1); }
    ;

SUFFIXPOSS:
      ID_SUFFIXPOSS { $$ = MAKE_TERM(ID_SUFFIXPOSS, $1); }
    ;

//=============================================================================
// BE

BEING = 'being' ;

BEEN = 'been' ;

//=============================================================================
// BE -- HAVE -- MODAL -- DO -- TO

BE:
      ID_BE { $$ = MAKE_TERM(ID_BE, $1); }
    ;

IBE:
      ID_IBE { $$ = MAKE_TERM(ID_IBE, $1); }
    ;

HAVE:
      ID_HAVE { $$ = MAKE_TERM(ID_HAVE, $1); }
    ;

MODAL = "will"|"would"|"can"|"could"|"might"|"should"|"must" ;

DO = 'do | 'does' | 'did' ;

TO_MOD_V:
      ID_TO_MOD_V { $$ = MAKE_TERM(ID_TO_MOD_V, $1); }
    ;

//=============================================================================
// CONJUGATION

CONJ_CLAUSE:
      ID_CONJ_CLAUSE { $$ = MAKE_TERM(ID_CONJ_CLAUSE, $1); }
    ;

CONJ_NP:
      ID_CONJ_NP { $$ = MAKE_TERM(ID_CONJ_NP, $1); }
    ;

CONJ_VP:
      ID_CONJ_VP { $$ = MAKE_TERM(ID_CONJ_VP, $1); }
    ;

CONJ_ADJ:
      ID_CONJ_ADJ { $$ = MAKE_TERM(ID_CONJ_ADJ, $1); }
    ;

CONJ_PREP:
      ID_CONJ_PREP { $$ = MAKE_TERM(ID_CONJ_PREP, $1); }
    ;

//=============================================================================
// WH-WORD

WH_WORD = "who"|"what"|"where"|"when"|"why"|"how"|"which" ;

WH_WORD_MOD_THAT:
      ID_WH_WORD_MOD_THAT
    ;

//=============================================================================
// CONDITIONAL

IF = 'if' ;
THEN = 'then' ;
BECAUSE = 'because' ;


WORD = "[a-zA-Z]+" ;