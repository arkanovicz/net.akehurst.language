namespace de.itemis.vistraq.traceability.computational.language
 
grammar Query {

    skip WHITE_SPACE : "\s+" ;
	skip SINGLE_LINE_COMMENT : "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
	skip MULTI_LINE_COMMENT : "//.*?$" ;
    
	query : querySource? returnDefinition? ;

	querySource : pathQuery | storedQueryReference ;
	storedQueryReference : 'FROM' STORED_QUERY_ID ;
    pathQuery : 'MATCH' pathExpression whereClause? ;
    pathExpression :  artefactSelector linkedArtefactSelectorPath? ;
   
	artefactSelector : artefactTypeReferenceExpression ('AS' NAME)? ;
    artefactTypeReferenceExpression : ANY_ARTEFACT_TYPE | NONE_ARTEFACT_TYPE | artefactTypeReference | negatedArtefactTypeReferenceExpression | artefactTypeReferenceGroup ;
    negatedArtefactTypeReferenceExpression : 'NOT' artefactTypeReferenceExpression ;
    artefactTypeReferenceGroup : '(' [artefactTypeReferenceExpression / 'OR' ]+ ')' ;

    linkedArtefactSelector : linkSelectorExpression ; //('AS' NAME)? ;
    linkedArtefactSelectorNegated : linkSelectorNegated ;// ('AS' NAME)? ;
	linkSelectorExpression : linkSelector | linkSelectorGroupedPath ;
	linkSelector : 'LINKED' links? multiplicity? via? ('TO'|'FROM') artefactSelector ;
	
	links : 'USING' POSITIVE_INT '..' UNLIMITED_POSITIVE_INT 'LINKS' ;
	multiplicity : POSITIVE_INT '..' UNLIMITED_POSITIVE_INT 'TIMES' ;
	
	via : 'VIA'  linkTypeReferenceExpression ;
	linkSelectorNegated : 'NOT' linkSelectorGroupedPath ;
	linkSelectorGroupedPath : '(' linkSelectorGroupedItem ')' ;
	linkSelectorGroupedItem : linkedArtefactSelectorPath | linkSelectorOperator ;
	//linkSelectorGroupedOperator : '(' linkSelectorOperator ')';
	linkSelectorOperator : linkedArtefactSelectorPath logicalOperator linkedArtefactSelectorPath ;

	linkedArtefactSelectorPath : linkedArtefactSelectorPathNormal | linkedArtefactSelectorPathNegated ;
	linkedArtefactSelectorPathNormal : linkedArtefactSelector+ ;
	linkedArtefactSelectorPathNegated : linkedArtefactSelector*  linkedArtefactSelectorNegated ;
	
    linkTypeReferenceExpression : ANY_LINK_TYPE | linkTypeReference | negatedLinkTypeReferenceExpression | linkTypeReferenceGroup ;
    negatedLinkTypeReferenceExpression : 'NOT' linkTypeReferenceExpression ;
    linkTypeReferenceGroup : '(' [linkTypeReferenceExpression / 'OR' ]+ ')' ;

	whereClause : 'WHERE' expression ;
    
	returnDefinition : 'RETURN' columnDefinition+ orderBy? ;
	columnDefinition : 'COLUMN' NAME 'CONTAINING' aggregateFunctionName? expression;

    expression : groupExpression < literalValue < root < propertyCall < methodCall  < infixFunction < conditionalExpression ;
    groupExpression : '(' expression ')'  ;
	root : NAME;
	propertyCall : expression '.' NAME ;
	methodCall : expression '.' NAME '(' argList ')';
	argList : [expression / ',']* ;
	infixFunction : expression operator expression ;
	operator : arithmeticOperator | comparisonOperator | logicalOperator ;
	arithmeticOperator : '+' | '-' | '*' | '/' ;
    comparisonOperator : '==' | '!=' | '<' | '>' | '<=' | '>=' ;
    logicalOperator: 'AND' | 'OR' | 'XOR' ;
    conditionalExpression : expression '?' expression ':' expression ;
	
	
	orderBy : 'ORDER' 'BY' [columnOrder / ',']+ ;
	columnOrder : NAME ('ASCENDING' | 'DESCENDING')? ;
	
	ANY_ARTEFACT_TYPE : '*' ;
	NONE_ARTEFACT_TYPE : 'none' ;
	artefactTypeReference : NAME ;
	ANY_LINK_TYPE : '*' ;
	linkTypeReference : NAME ;
	aggregateFunctionName : NAME ;
	STORED_QUERY_ID : "([a-zA-Z_][a-zA-Z0-9_]*)([.][a-zA-Z_][a-zA-Z0-9_]*)?" ; // project metricDef OR metricSet.metricDef
	NAME : "[a-zA-Z_][a-zA-Z0-9_]*" ;
	POSITIVE_INT : "[0-9]+" ;
	UNLIMITED_POSITIVE_INT : "[0-9]+" | '*' ;

    literalValue : BOOLEAN | SINGLE_QUOTE_STRING | INTEGER | REAL | NULL ;
    BOOLEAN : 'true' | 'false' ;
    SINGLE_QUOTE_STRING : "'(?:\\?.)*?'" ;
    INTEGER : "[0-9]+" ;
    REAL : "([0-9]+[.])?[0-9]+" ;
    NULL : 'null' ;

}