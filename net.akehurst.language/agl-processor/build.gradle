import org.gradle.api.publish.maven.MavenPublication

/**
 * Copyright (C) 2018 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




//apply plugin: 'kotlin-platform-common'
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.30'
    id("io.gitlab.arturbosch.detekt").version("1.0.0-RC10")
    id 'com.moowork.node' version "1.2.0"
    id 'maven-publish'
}

//dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${version_kotlin}"
    
//    testImplementation "org.jetbrains.kotlin:kotlin-test-common:${version_kotlin}"
//    testImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common:${version_kotlin}"
//}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm8') {
            // Configure a single target's compilations (main and test)
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }
        
        fromPreset(presets.js, 'js') {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    moduleKind = 'umd'
                }
            }
        }
  //      fromPreset(presets.macosX64, 'macos') {
            /* You can specify additional settings for the 'linux' target here */
  //      }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${version_kotlin}"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:${version_kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:${version_kotlin}"
            }
        }
        jvm8Main {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version_kotlin}"
            }
        }
        jvm8Test {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:${version_kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:${version_kotlin}"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:${version_kotlin}"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js:${version_kotlin}"
            }
        }
    }
}

detekt {
    toolVersion = "[version]"
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("path/to/config.yml")
}
/*
node {
    download = true
}


task populateNodeModules(type: Copy, dependsOn: compileTestKotlinJs) {
    from compileTestKotlinJs.destinationDir

    configurations.jsTestRuntimeClasspath.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

task installMocha(type: YarnTask) {
    args = ['add', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlinJs, populateNodeModules, installMocha]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlinJs.outputFile]
}
*/
//jsTest.dependsOn runMocha

publishing {
    repositories {
        maven {
            name 'itemis-akehurst'
            url "https://projects.itemis.de/nexus/content/repositories/akehurst/"
            credentials {
                username = project.hasProperty('username') ? project.property('username') : System.getenv('USERNAME')
                password = project.hasProperty('password') ? project.property('password') : System.getenv('PASSWORD')
            }
        }
    }
}