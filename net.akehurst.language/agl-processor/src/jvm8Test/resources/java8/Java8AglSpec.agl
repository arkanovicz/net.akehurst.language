namespace net.akehurst.language.java8

grammar Base {
   skip leaf WHITESPACE = "\s+" ;
   skip leaf COMMENT_SINGLE_LINE = "//[^\n]*$" ;
   skip leaf COMMENT_MULTI_LINE = "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
}

grammar Literals {

    Literal
      = INTEGER_LITERAL
      | FLOATING_POINT_LITERAL
      | BOOLEAN_LITERAL
      | CHARACTER_LITERAL
      | STRING_LITERAL
      | NULL_LITERAL
      ;

    leaf INTEGER_LITERAL
      = HEX_NUMERAL
      | OCT_NUMERAL
      | BINARY_NUMERAL
      | DECIMAL_NUMERAL
      ;

    leaf DECIMAL_NUMERAL = "(0|[1-9]([0-9_]*[0-9])?)" INTEGER_TYPE_SUFFIX? ;
    leaf HEX_NUMERAL     = "0[xX][0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?" INTEGER_TYPE_SUFFIX? ;
    leaf OCT_NUMERAL     = "0_*[0-7]([0-7_]*[0-7])?" INTEGER_TYPE_SUFFIX? ;
    leaf BINARY_NUMERAL  = "0[bB][01]([01_]*[01])?" INTEGER_TYPE_SUFFIX? ;

    leaf INTEGER_TYPE_SUFFIX = 'l' | 'L' ;

    leaf FLOATING_POINT_LITERAL
     = "[0-9]([eE][+-]?[0-9]+)?" "[fdFD]"
     | "[0-9]*.[0-9]*" "[eE][+-]?(0|[1-9])+"? "[fdFD]"?
     ;

    leaf BOOLEAN_LITERAL   = 'true' | 'false' ;
    leaf CHARACTER_LITERAL = "'" ("[^'\r\n\\]" | ESCAPE_SEQUENCE) "'" ;
    leaf ESCAPE_SEQUENCE
        = '\\' "[btnfr\x27\\]"
        | '\\' ("[0-3]"? "[0-7]")? "[0-7]"
        | '\\' 'u'+ "[0-9a-fA-F]{4}"
        ;
    leaf STRING_LITERAL    = "\"([^\"\\]|\\.)*\"" ;
    leaf NULL_LITERAL      = 'null' ;

}

grammar Types extends Base {

    Type = PrimitiveType | ReferenceType ;

    PrimitiveType = Annotation* NumericType | Annotation* 'boolean' ;
    NumericType = IntegralType | FloatingPointType ;
    IntegralType = 'byte' | 'short' | 'int' | 'long' | 'char' ;
    FloatingPointType = 'float' | 'double' ;

    ReferenceType = QualifiedClassOrInterfaceType | TypeVariable | ArrayType ;
    QualifiedClassOrInterfaceType = [ClassOrInterfaceType / '.']+ ;
    ClassOrInterfaceType = Annotation* IDENTIFIER TypeArguments? ;
    TypeArguments = '<' '>' ;
    TypeVariable = Annotation* IDENTIFIER ;
    ArrayType = PrimitiveType Dims | QualifiedClassOrInterfaceType Dims | TypeVariable Dims ;
    Dims = (Annotation* '[' ']')+ ;

    Annotation = '@' IDENTIFIER ;

    leaf IDENTIFIER = JAVA_LETTER JAVA_LETTER_OR_NUMBER* ;

    leaf JAVA_LETTER_OR_NUMBER = JAVA_LETTER | "[0-9]" ;
    leaf JAVA_LETTER= UNICODE_LETTER | '$' | '_' ;
    leaf UNICODE_LETTER = "[A-Za-z]" ; //TODO: add unicode chars !
}

grammar Expressions extends Literals {
  expression
    = rootExpression
    | unaryExpression
    | infixExpression
    ;

  rootExpression
    = Literal
    | 'this'
    | 'super'
    ;

  unaryExpression = unaryOperator expression ;
  infixExpression = [ expression / infixOperator ]2+ ;

  unaryOperator = '+' | '-' | '!' | '~' ;
  infixOperator
    = '+' | '-' | '*' | '/'
    | '>' | '<'
    | '==' | '>=' | '<=' | '!='
    | '&&' | '||' | '++' | '--'
    | '&' | '|' | '^' | '%'
    | '<<' | '>>' | '>>>'
    ;
}

grammar Statements extends Types {
    assignment = var '=' Expressions.expression ;
    var = IDENTIFIER ;
}

grammar JavaFile {
    compilationUnit = packageDecl? ;
    packageDecl = 'package' ;
}