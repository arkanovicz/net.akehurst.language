/**
 * Copyright (c) 2010 - 2018 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * 	committers of YAKINDU - initial API and implementation
 *
 */
namespace  org.yakindu.stext

grammar Expressions {

    skip WS = "\s+";
   	skip SINGLE_LINE_COMMENT = "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
   	skip MULTI_LINE_COMMENT = "//.*?$" ;

    Expression = AssignmentExpression;
    AssignmentExpression = ConditionalExpression ( AssignmentOperator ConditionalExpression )* ;
    ConditionalExpression = LogicalOrExpression ( '?' LogicalOrExpression ':' LogicalOrExpression )? ;
    LogicalOrExpression  = LogicalAndExpression ( LogicalOrOperator LogicalAndExpression )* ;
    LogicalAndExpression = LogicalNotExpression ( LogicalAndOperator LogicalNotExpression )* ;
    LogicalNotExpression = BitwiseOrExpression | LogicalNotOperator BitwiseOrExpression ;
    BitwiseOrExpression = BitwiseXorExpression ( BitwiseOrOperator BitwiseXorExpression )* ;
    BitwiseXorExpression = BitwiseAndExpression ( BitwiseXOrOperator BitwiseAndExpression )* ;
    BitwiseAndExpression = LogicalRelationExpression ( BitwiseAndOperator LogicalRelationExpression )* ;
    LogicalRelationExpression = ShiftExpression ( RelationalOperator ShiftExpression )* ;
    ShiftExpression = NumericalAddSubtractExpression ( ShiftOperator NumericalAddSubtractExpression )* ;
    NumericalAddSubtractExpression = NumericalMultiplyDivideExpression ( AdditiveOperator NumericalMultiplyDivideExpression )* ;
    NumericalMultiplyDivideExpression = NumericalUnaryExpression ( MultiplicativeOperator NumericalUnaryExpression )* ;
    NumericalUnaryExpression = PostFixUnaryExpression | UnaryOperator PostFixUnaryExpression ;
    PostFixUnaryExpression = TypeCastExpression ( PostFixOperator )* ;
    TypeCastExpression = PrimaryExpression ( 'as' TypeSpecifier)* ;
    PrimaryExpression
        = PrimitiveValueExpression
        | FeatureCall
	    | ParenthesizedExpression
	    ;

    PrimitiveValueExpression = Literal ;
    FeatureCall = ElementReferenceExpression (
       ( '.' | '.@' ) ID (
             '('(Argument (',' Argument)*)?')'
		     |
	         ('[' Expression ']') ('[' Expression ']')*
	         )?
	   )*
	;

    ElementReferenceExpression = ID	('('(Argument (',' Argument)*)?	')' | ('[' Expression ']')  ('[' Expression ']')* )?;

Argument=(ID '=')?  ConditionalExpression ;

ParenthesizedExpression = '(' Expression ')' ;

TypeSpecifier = QID ('<' (TypeSpecifier (',' TypeSpecifier)*)? '>')?;

    Literal
      = BoolLiteral
      | IntLiteral
      | HexLiteral
      | BinaryLiteral
      | DoubleLiteral
      | FloatLiteral
      | StringLiteral
      | NullLiteral
      ;

    BoolLiteral = BOOL;
    IntLiteral = INT;
    DoubleLiteral = DOUBLE;
    FloatLiteral =FLOAT;
    HexLiteral =HEX;
    BinaryLiteral =BINARY;
    StringLiteral =STRING;
    NullLiteral = 'null';

    LogicalAndOperator = '&&';
    LogicalOrOperator ='||';
    LogicalNotOperator = '!';
    BitwiseXOrOperator=	'^';
    BitwiseOrOperator=	'|';
    BitwiseAndOperator=	'&';
    PostFixOperator='++' | '--';
    AssignmentOperator = '=' | '*='	| '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' ;
    ShiftOperator = '<<' | '>>' ;
    AdditiveOperator = '+' | '-' ;
    MultiplicativeOperator = '*' | '/' | '%';
    UnaryOperator = '+' | '-' | '~';
    RelationalOperator = '<' | '<=' | '>' | '>=' | '==' | '!=' ;

    leaf BOOL = "true|false|yes|no" ;
    leaf HEX  = "0(x|X)[0-9a-fA-F]+" ;
    leaf BINARY  = "0(b|B)[01]+" ;
    DOUBLE = (INT '.' INT) ('e' ('-' | '+') INT)? ('d' | 'D')? ;
    FLOAT = (INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F')? ;
    QID = ID ('.' ID)* ;
    leaf INT = "[0-9]+" ;
    leaf ID = "[a-zA-Z_][a-zA-Z_0-9]*" ;
    leaf STRING = DQ_STRING | SQ_STRING ;
    leaf DQ_STRING = "\"(?:\\?.)*?\"";
    leaf SQ_STRING = "'(?:\\?.)*?'" ;
}