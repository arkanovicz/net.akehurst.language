/**
 * Modified from Antlr v4 Optimised JavaParser.v4 file.
 */

/*
 * [The "BSD license"]
 *  Copyright (c) 2014 Terence Parr
 *  Copyright (c) 2014 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * A Java 8 grammar for ANTLR 4 derived from the Java Language Specification
 * chapter 19.
 *
 * NOTE: This grammar results in a generated parser that is much slower
 *       than the Java 7 grammar in the grammars-v4/java directory. This
 *     one is, however, extremely close to the spec.
 *
 * You can test with
 *
 *  $ antlr4 Java8.g4
 *  $ javac *.java
 *  $ grun Java8 compilationUnit *.java
 *
 * Or,
~/antlr/code/grammars-v4/java8 $ java Test .
/Users/parrt/antlr/code/grammars-v4/java8/./Java8BaseListener.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Lexer.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Listener.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Parser.java
/Users/parrt/antlr/code/grammars-v4/java8/./Test.java
Total lexer+parser time 30844ms.
 */
 
namespace test
 
grammar Java8Optm1 {

// Keywords

ABSTRACT=           'abstract';
ASSERT=             'assert';
BOOLEAN=            'boolean';
BREAK=              'break';
BYTE=               'byte';
CASE=               'case';
CATCH=              'catch';
CHAR=               'char';
CLASS=              'class';
CONST=              'const';
CONTINUE=           'continue';
DEFAULT=            'default';
DO=                 'do';
DOUBLE=             'double';
ELSE=               'else';
ENUM=               'enum';
EXTENDS=            'extends';
FINAL=              'final';
FINALLY=            'finally';
FLOAT=              'float';
FOR=                'for';
IF=                 'if';
GOTO=               'goto';
IMPLEMENTS=         'implements';
IMPORT=             'import';
INSTANCEOF=         'instanceof';
INT=                'int';
INTERFACE=          'interface';
LONG=               'long';
NATIVE=             'native';
NEW=                'new';
PACKAGE=            'package';
PRIVATE=            'private';
PROTECTED=          'protected';
PUBLIC=             'public';
RETURN=             'return';
SHORT=              'short';
STATIC=             'static';
STRICTFP=           'strictfp';
SUPER=              'super';
SWITCH=             'switch';
SYNCHRONIZED=       'synchronized';
THIS=               'this';
THROW=              'throw';
THROWS=             'throws';
TRANSIENT=          'transient';
TRY=                'try';
VOID=               'void';
VOLATILE=           'volatile';
WHILE=              'while';

// Literals

DECIMAL_LITERAL=    "(0|[1-9]([0-9_]*[0-9])?)";
HEX_LITERAL=        "0[xX][0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[lL]?";
OCT_LITERAL=        "0_*[0-7]([0-7_]*[0-7])?[lL]?";
BINARY_LITERAL=     "0[bB][01]([01_]*[01])?[lL]?";
FLOAT_LITERAL=		"(((0|([1-9](0|[1-9])*)).(0|[1-9])*|.(0|[1-9])+ )([eE][+-]?(0|[1-9])+)?)|((0|N(0|[1-9]))([eE][+-]?(0|[1-9])+))";

HEX_FLOAT_LITERAL=  '0' "[xX]" (HexDigits '.'? | HexDigits? '.' HexDigits) "[pP]" "[+-]"? Digits "[fFdD]"?;

BOOL_LITERAL=     	"true|false" ;

CHAR_LITERAL=       '\'' ("[^'\\\r\n]" | EscapeSequence) '\'';

STRING_LITERAL=     "\"(?:\\?.)*?\"" ;

NULL_LITERAL=       'null';

// Separators

LPAREN=             '(';
RPAREN=             ')';
LBRACE=             '{';
RBRACE=             '}';
LBRACK=             '[';
RBRACK=             ']';
SEMI=               ';';
COMMA=              ',';
DOT=                '.';

// Operators

ASSIGN=             '=';
GT=                 '>';
LT=                 '<';
BANG=               '!';
TILDE=              '~';
QUESTION=           '?';
COLON=              ':';
EQUAL=              '==';
LE=                 '<=';
GE=                 '>=';
NOTEQUAL=           '!=';
AND=                '&&';
OR=                 '||';
INC=                '++';
DEC=                '--';
ADD=                '+';
SUB=                '-';
MUL=                '*';
DIV=                '/';
BITAND=             '&';
BITOR=              '|';
CARET=              '^';
MOD=                '%';

ADD_ASSIGN=         '+=';
SUB_ASSIGN=         '-=';
MUL_ASSIGN=         '*=';
DIV_ASSIGN=         '/=';
AND_ASSIGN=         '&=';
OR_ASSIGN=          '|=';
XOR_ASSIGN=         '^=';
MOD_ASSIGN=         '%=';
LSHIFT_ASSIGN=      '<<=';
RSHIFT_ASSIGN=      '>>=';
URSHIFT_ASSIGN=     '>>>=';

// Java 8 tokens

ARROW=              '->';
COLONCOLON=         '::';

// Additional symbols not defined in the lexical specification

AT=                 '@';
ELLIPSIS=           '...';

// Whitespace and comments

skip WS  =  "[ \t\r\n\u000C]+";
skip COMMENT =   "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
skip LINE_COMMENT =   "//.*?$" ;

// Identifiers

IDENTIFIER=	"([a-zA-Z$_]|[^\u0000-\u00FF\uD800-\uDBFF]|([\uD800-\uDBFF][\uDC00-\uDFFF]))([a-zA-Z0-9$_]|[^\u0000-\u00FF\uD800-\uDBFF]|([\uD800-\uDBFF][\uDC00-\uDFFF]))*" ;

ExponentPart
    = "[eE]" "[+-]"? Digits
    ;

EscapeSequence
    = '\\' "[btnfr\x22'\\]"
    | '\\' ("[0-3]"? "[0-7]")? "[0-7]"
    | '\\' 'u'+ HexDigit HexDigit HexDigit HexDigit
    ;

HexDigits
    = HexDigit ((HexDigit | '_')* HexDigit)?
    ;

HexDigit
    = "[0-9a-fA-F]"
    ;

Digits
    = "[0-9]" ("[0-9_]"* "[0-9]")?
    ;

LetterOrDigit
    = Letter
    | "[0-9]"
    ;

Letter
    = "[a-zA-Z$_]" // these are the "java letters" below 0x7F
    | "[^\u0000-\u007F\uD800-\uDBFF]" // covers all characters above 0x7F which are not a surrogate
    | "[\uD800-\uDBFF]" "[\uDC00-\uDFFF]" // covers UTF-16 surrogate pairs encodings for U+10000 to U+10FFFF
    ;

compilationUnit
    = packageDeclaration? importDeclaration* typeDeclaration*
    ;

packageDeclaration
    = annotation* 'package' qualifiedName ';'
    ;

importDeclaration
    = 'import' 'static'? qualifiedName ('.' '*')? ';'
    ;

typeDeclaration
    = classOrInterfaceModifier*
      (classDeclaration | enumDeclaration | interfaceDeclaration | annotationTypeDeclaration)
    | ';'
    ;

modifier
    = classOrInterfaceModifier
    | 'native'
    | 'synchronized'
    | 'transient'
    | 'volatile'
    ;

classOrInterfaceModifier
    = annotation
    | 'public'
    | 'protected'
    | 'private'
    | 'static'
    | 'abstract'
    | 'final'    // FINAL for class only -- does not apply to interfaces
    | 'strictfp'
    ;

variableModifier
    = 'final'
    | annotation
    ;

classDeclaration
    = 'class' IDENTIFIER typeParameters?
      ('extends' typeType)?
      ('implements' typeList)?
      classBody
    ;

typeParameters
    = '<' [typeParameter / ',']+ '>'
    ;

typeParameter
    = annotation* IDENTIFIER ('extends' [typeType / '&']+)?
    ;

enumDeclaration
    = 'enum' IDENTIFIER ('implements' typeList)? '{' enumConstants? ','? enumBodyDeclarations? '}'
    ;

enumConstants
    = [enumConstant / ',']+
    ;

enumConstant
    = annotation* IDENTIFIER arguments? classBody?
    ;

enumBodyDeclarations
    = ';' classBodyDeclaration*
    ;

interfaceDeclaration
    = 'interface' IDENTIFIER typeParameters? ('extends' typeList)? interfaceBody
    ;

classBody
    = '{' classBodyDeclaration* '}'
    ;

interfaceBody
    = '{' interfaceBodyDeclaration* '}'
    ;

classBodyDeclaration
    = ';'
    | 'static'? block
    | modifier* memberDeclaration
    ;

memberDeclaration
    = methodDeclaration
    | genericMethodDeclaration
    | fieldDeclaration
    | constructorDeclaration
    | genericConstructorDeclaration
    | interfaceDeclaration
    | annotationTypeDeclaration
    | classDeclaration
    | enumDeclaration
    ;

/* We use rule this even for void methods which cannot have [] after parameters.
   This simplifies grammar and we can consider void to be a type, which
   renders the [] matching as a context-sensitive issue or a semantic check
   for invalid return type after parsing.
 */
methodDeclaration
    = typeTypeOrVoid IDENTIFIER formalParameters ('[' ']')*
      ('throws' qualifiedNameList)?
      methodBody
    ;

methodBody
    = block
    | ';'
    ;

typeTypeOrVoid
    = typeType
    | 'void'
    ;

genericMethodDeclaration
    = typeParameters methodDeclaration
    ;

genericConstructorDeclaration
    = typeParameters constructorDeclaration
    ;

constructorDeclaration
    = IDENTIFIER formalParameters ('throws' qualifiedNameList)? block /*constructorBody*/
    ;

fieldDeclaration
    = typeType variableDeclarators ';'
    ;

interfaceBodyDeclaration
    = modifier* interfaceMemberDeclaration
    | ';'
    ;

interfaceMemberDeclaration
    = constDeclaration
    | interfaceMethodDeclaration
    | genericInterfaceMethodDeclaration
    | interfaceDeclaration
    | annotationTypeDeclaration
    | classDeclaration
    | enumDeclaration
    ;

constDeclaration
    = typeType [constantDeclarator / ',']+ ';'
    ;

constantDeclarator
    = IDENTIFIER ('[' ']')* '=' variableInitializer
    ;

// see matching of [] comment in methodDeclaratorRest
// methodBody from Java8
interfaceMethodDeclaration
    = interfaceMethodModifier* (typeTypeOrVoid | typeParameters annotation* typeTypeOrVoid)
      IDENTIFIER formalParameters ('[' ']')* ('throws' qualifiedNameList)? methodBody
    ;

// Java8
interfaceMethodModifier
    = annotation
    | 'public'
    | 'abstract'
    | 'default'
    | 'static'
    | 'strictfp'
    ;

genericInterfaceMethodDeclaration
    = typeParameters interfaceMethodDeclaration
    ;

variableDeclarators
    = [variableDeclarator / ',']+
    ;

variableDeclarator
    = variableDeclaratorId ('=' variableInitializer)?
    ;

variableDeclaratorId
    = IDENTIFIER ('[' ']')*
    ;

variableInitializer
    = arrayInitializer
    | expression
    ;

arrayInitializer
    = '{' ( [variableInitializer / ',']+ (',')? )? '}'
    ;

classOrInterfaceType
    = [ (IDENTIFIER typeArguments?) / '.']+
    ;

typeArgument
    = typeType
    | '?' (('extends' | 'super') typeType)?
    ;

qualifiedNameList
    = [qualifiedName / ',']+
    ;

formalParameters
    = '(' formalParameterList? ')'
    ;

formalParameterList
    = [formalParameter  / ',']+ (',' lastFormalParameter)?
    | lastFormalParameter
    ;

formalParameter
    = variableModifier* typeType variableDeclaratorId
    ;

lastFormalParameter
    = variableModifier* typeType '...' variableDeclaratorId
    ;

qualifiedName
    = [IDENTIFIER / '.']+
    ;

literal
    = integerLiteral
    | floatLiteral
    | CHAR_LITERAL
    | STRING_LITERAL
    | BOOL_LITERAL
    | NULL_LITERAL
    ;

integerLiteral
    = DECIMAL_LITERAL
    | HEX_LITERAL
    | OCT_LITERAL
    | BINARY_LITERAL
    ;

floatLiteral
    = FLOAT_LITERAL
    | HEX_FLOAT_LITERAL
    ;

// ANNOTATIONS

annotation
    = '@' qualifiedName ('(' ( elementValuePairs | elementValue )? ')')?
    ;

elementValuePairs
    = [elementValuePair / ',' ]+
    ;

elementValuePair
    = IDENTIFIER '=' elementValue
    ;

elementValue
    = expression
    | annotation
    | elementValueArrayInitializer
    ;

elementValueArrayInitializer
    = '{' ([elementValue / ',' ]+)? (',')? '}'
    ;

annotationTypeDeclaration
    = '@' 'interface' IDENTIFIER annotationTypeBody
    ;

annotationTypeBody
    = '{' (annotationTypeElementDeclaration)* '}'
    ;

annotationTypeElementDeclaration
    = modifier* annotationTypeElementRest
    | ';' // this is not allowed by the grammar, but apparently allowed by the actual compiler
    ;

annotationTypeElementRest
    = typeType annotationMethodOrConstantRest ';'
    | classDeclaration ';'?
    | interfaceDeclaration ';'?
    | enumDeclaration ';'?
    | annotationTypeDeclaration ';'?
    ;

annotationMethodOrConstantRest
    = annotationMethodRest
    | annotationConstantRest
    ;

annotationMethodRest
    = IDENTIFIER '(' ')' defaultValue?
    ;

annotationConstantRest
    = variableDeclarators
    ;

defaultValue
    = 'default' elementValue
    ;

// STATEMENTS / BLOCKS

block
    = '{' blockStatement* '}'
    ;

blockStatement
    = localVariableDeclaration ';'
    | statement
    | localTypeDeclaration
    ;

localVariableDeclaration
    = variableModifier* typeType variableDeclarators
    ;

localTypeDeclaration
    = classOrInterfaceModifier*
      (classDeclaration | interfaceDeclaration)
    | ';'
    ;

statement
    = block
    | 'assert' expression (':' expression)? ';'
    | 'if' parExpression statement ('else' statement)?
    | 'for' '(' forControl ')' statement
    | 'while' parExpression statement
    | 'do' statement 'while' parExpression ';'
    | 'try' block (catchClause+ finallyBlock? | finallyBlock)
    | 'try' resourceSpecification block catchClause* finallyBlock?
    | 'switch' parExpression '{' switchBlockStatementGroup* switchLabel* '}'
    | 'synchronized' parExpression block
    | 'return' expression? ';'
    | 'throw' expression ';'
    | 'break' IDENTIFIER? ';'
    | 'continue' IDENTIFIER? ';'
    | ';'
    | expression ';'
    | IDENTIFIER ':' statement
    ;

catchClause
    = 'catch' '(' variableModifier* catchType IDENTIFIER ')' block
    ;

catchType
    = qualifiedName ('|' qualifiedName)*
    ;

finallyBlock
    = 'finally' block
    ;

resourceSpecification
    = '(' resources ';'? ')'
    ;

resources
    = resource (';' resource)*
    ;

resource
    = variableModifier* classOrInterfaceType variableDeclaratorId '=' expression
    ;

/** Matches cases then statements, both of which are mandatory.
 *  To handle empty cases at the end, we add switchLabel* to statement.
 */
switchBlockStatementGroup
    = switchLabel+ blockStatement+
    ;

switchLabel
    = CASE (expression | IDENTIFIER) ':'
    | 'default' ':'
    ;

forControl
    = enhancedForControl
    | forInit? ';' expression? ';' expressionList?
    ;

forInit
    = localVariableDeclaration
    | expressionList
    ;

enhancedForControl
    = variableModifier* typeType variableDeclaratorId ':' expression
    ;

// EXPRESSIONS

parExpression
    = '(' expression ')'
    ;

expressionList
    = expression (',' expression)*
    ;

expression
    = primary
    | expression '.'
      (IDENTIFIER
      | 'this'
      | 'new' nonWildcardTypeArguments? innerCreator
      | 'super' superSuffix
      | explicitGenericInvocation
      )
    | expression '[' expression ']'
    | expression '(' expressionList? ')'
    | 'new' creator
    | '(' typeType ')' expression
    | expression ('++' | '--')
    | ('+'|'-'|'++'|'--') expression
    | ('~'|'!') expression
    | expression ('*'|'/'|'%') expression
    | expression ('+'|'-') expression
    | expression ('<' '<' | '>' '>' '>' | '>' '>') expression
    | expression ('<=' | '>=' | '>' | '<') expression
    | expression 'instanceof' typeType
    | expression ('==' | '!=') expression
    | expression '&' expression
    | expression '^' expression
    | expression '|' expression
    | expression '&&' expression
    | expression '||' expression
    | expression '?' expression ':' expression
    | expression
      ('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '>>=' | '>>>=' | '<<=' | '%=')
      expression
    | lambdaExpression // Java8

    // Java 8 methodReference
    | expression '::' typeArguments? IDENTIFIER
    | typeType '::' (typeArguments? IDENTIFIER | 'new')
    | classType '::' typeArguments? 'new'
    ;

// Java8
lambdaExpression
    = lambdaParameters '->' lambdaBody
    ;

// Java8
lambdaParameters
    = IDENTIFIER
    | '(' formalParameterList? ')'
    | '(' [IDENTIFIER / ',']+ ')'
    ;

// Java8
lambdaBody
    = expression
    | block
    ;

primary
    = '(' expression ')'
    | 'this'
    | 'super'
    | literal
    | IDENTIFIER
    | typeTypeOrVoid '.' 'class'
    | nonWildcardTypeArguments (explicitGenericInvocationSuffix | 'this' arguments)
    ;

classType
    = (classOrInterfaceType '.')? annotation* IDENTIFIER typeArguments?
    ;

creator
    = nonWildcardTypeArguments createdName classCreatorRest
    | createdName (arrayCreatorRest | classCreatorRest)
    ;

createdName
    = [(IDENTIFIER typeArgumentsOrDiamond?) / '.']+
    | primitiveType
    ;

innerCreator
    = IDENTIFIER nonWildcardTypeArgumentsOrDiamond? classCreatorRest
    ;

arrayCreatorRest
    = '[' (']' ('[' ']')* arrayInitializer | expression ']' ('[' expression ']')* ('[' ']')*)
    ;

classCreatorRest
    = arguments classBody?
    ;

explicitGenericInvocation
    = nonWildcardTypeArguments explicitGenericInvocationSuffix
    ;

typeArgumentsOrDiamond
    = '<' '>'
    | typeArguments
    ;

nonWildcardTypeArgumentsOrDiamond
    = '<' '>'
    | nonWildcardTypeArguments
    ;

nonWildcardTypeArguments
    = '<' typeList '>'
    ;

typeList
    = [typeType / ',' ]+
    ;

typeType
    = annotation? (classOrInterfaceType | primitiveType) ('[' ']')*
    ;

primitiveType
    = 'boolean'
    | 'char'
    | 'byte'
    | 'short'
    | 'int'
    | 'long'
    | 'float'
    | 'double'
    ;

typeArguments
    = '<' [typeArgument / ',']+ '>'
    ;

superSuffix
    = arguments
    | '.' IDENTIFIER arguments?
    ;

explicitGenericInvocationSuffix
    = 'super' superSuffix
    | IDENTIFIER arguments
    ;

arguments
    = '(' expressionList? ')'
    ;


}